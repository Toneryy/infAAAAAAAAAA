import time
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton,\
    ReplyKeyboardRemove
from requests import get
from json import loads
from googletrans import Translator, LANGCODES
from logging import basicConfig, getLogger, DEBUG
from sqlite3 import connect
import schedule
from schedule import every, repeat, run_pending
from pytz import timezone


basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=DEBUG)
logger = getLogger(__name__)
TOKEN = '6058507940:AAEAb_bmD0lXXT_a742jKCXlHrYRfaGNsaI'
bot = TeleBot(TOKEN)
API_open_weather = 'c507bcf8971af71b550c3281cad1b275'
translator = Translator(service_urls=['translate.googleapis.com'])
langs_names = list(LANGCODES.keys())


# @repeat(every().day.at('15:29', timezone('Europe/Moscow')))
def msg(message):
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É?')


def get_weather(message, result):
    if result.status_code == 200:
        data = loads(result.text)
        city = translator.translate(data['name'], src='en', dest='ru').text
        temp = data['main']['temp']
        real_temp = data['main']['feels_like']
        conditions = data['weather'][0]['description']
        pressure = data['main']['pressure']
        humidity = data['main']['humidity']
        bot.reply_to(message,
                     f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {temp} ¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {real_temp} ¬∞C\n–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: '
                     f'{conditions}\n–î–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞: {int(pressure/1.333)} –º–º. —Ä—Ç. —Å—Ç–æ–ª–±–∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {humidity}%')
        if conditions == 'clear sky':
            sticker_id = 'CAACAgIAAxkBAAEKWV9lC2QKSuI1rAHW6qA-v9CBnw00iQACOzYAAjVQYUjAUz1pjKjxtjAE'
        elif conditions == 'light rain':
            sticker_id = 'CAACAgIAAxkBAAEKWS9lC1GI2grIW91nBQc7h4R2Iet8JwACPDcAAjTpUEiCyCmPfMIF2jAE'
        elif conditions == 'moderate rain':
            sticker_id = 'CAACAgIAAxkBAAEKWTxlC1PpXf-hn28iQriymSDihXzIsAAC90AAAqfUWUilawirv5bpLzAE'
        elif conditions == 'heavy intensity rain':
            sticker_id = 'CAACAgIAAxkBAAEKWS1lC1EWKMRvJ_pxkL3r3YZItnx28QACMzwAAtaTYEjjYaSA5JG9ZTAE'
        elif conditions in ['broken clouds', 'scattered clouds', 'overcast clouds']:
            sticker_id = 'CAACAgIAAxkBAAEKWSZlC0iq2_M72eEYRmnqB_tQr92KgQACsjkAAkdbWEhyZFRbA_1pHzAE'
        elif conditions in ['mist', 'smoke']:
            sticker_id = 'CAACAgIAAxkBAAEKWFdlCvMgbEyu0ovY3RTLWljNlCQNsgACrTgAAq4lWUjCR7-2E9FdODAE'
        bot.send_sticker(message.chat.id, sticker_id)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


@bot.message_handler(commands=['start', 'menu'])
def menu(message):
    username = ''
    if message.from_user.first_name:
        username += message.from_user.first_name
    if message.from_user.last_name:
        username += ' ' + message.from_user.last_name
    username = username.strip()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    weather_button = KeyboardButton('üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞')
    weather_location_button = KeyboardButton('üó∫ –ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', request_location=True)
    language_button = KeyboardButton('üá∫üá∏ –í—ã–±–æ—Ä —è–∑—ã–∫–∞')
    information_button = KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    settings_button = KeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    donate_button = KeyboardButton('üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
    write_button = KeyboardButton('‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º')
    markup.add(weather_button, weather_location_button, language_button, information_button, settings_button,
               donate_button, write_button)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {username}! –Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.\n'
                     f'–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞')
def choose_city(message):
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ')


@bot.message_handler(func=lambda message: message.text == 'üó∫ –ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')
def weather_by_location(message):
    pass



@bot.message_handler(func=lambda message: message.text == 'üá∫üá∏ –í—ã–±–æ—Ä —è–∑—ã–∫–∞')
def choose_lang(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton(language) for language in langs_names]
    for button in buttons:
        markup.add(button)
    bot.send_message(message.chat.id, f'Please choose your language or write in English', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def information(message):
    bot.send_message(message.chat.id,
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–æ–ª–µ–µ —á–µ–º —Å–æ—Ç–Ω–µ —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞.\n'
                     '–°–æ–∑–¥–∞–Ω –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≥–æ—Ä–æ–¥–∞—Ö.\n'
                     '–ù–∞–ø–∏—Å–∞–Ω –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:\n'
                     'telebot, json, requests, googletrans, logging.')


@bot.message_handler(func=lambda message: message.text == 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings(message):
    pass


@bot.message_handler(func=lambda message: message.text == 'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
def donate(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', url='https://google.com'))
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, —Ç–∞–∫ –º—ã —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ.',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º')
def donate(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å', url='https://forms.gle/4ET9KWs1Vqh3vZo37'))
    bot.send_message(message.chat.id, '–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.strip().lower() in langs_names)
def switch_lang(message):
    bot.send_message(message.chat.id, f'Your language: {message.text.strip().lower()}')


@bot.message_handler(content_types=['text'])
def text_type(message):
    city = message.text.strip().lower()
    result = get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_open_weather}&units=metric')
    get_weather(message, result)


@bot.message_handler(content_types=['location'])
def location_type(message):
    location = message.location
    print(location)
    result = get(f'https://api.openweathermap.org/data/2.5/weather?lon={location.longitude}&lat='
                 f'{location.latitude}&appid={API_open_weather}&units=metric')
    get_weather(message, result)


@bot.message_handler(content_types=['audio', 'document', 'animation', 'game', 'photo', 'sticker', 'video', 'video_note', 'voice',
                   'contact', 'venue', 'dice', 'invoice', 'successful_payment', 'connected_website', 'poll',
                   'passport_data', 'web_app_data'])
def unknown_type(message):
    bot.reply_to(message, '–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µüò¢\n–í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', parse_mode='html')




bot.polling(none_stop=True)
schedule.every().day.at('15:31', timezone('Europe/Moscow')).do(msg)
while True:
    schedule.run_pending()
    time.sleep(1)
